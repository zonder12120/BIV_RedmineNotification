import {clearMissedIssues, getIssueData, getIssueJournals, getMissedIssuesList} from "./redmine";
import {sendMessage} from "./telegram";
import {Config} from "./config";
import {Issue, IssueContent} from "./types";

// –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º –≤ –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–¥–∞—á–∏ —è–≤–ª—è—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏, –º—ã –∏—Ö –≤—ã–≤–æ–¥–∏–º
export async function delayedNotifications() {
    const actualList: number[] = [];

    for (const issue of getMissedIssuesList()) {
        const index = getMissedIssuesList().indexOf(issue);
        let listingIssuesMsg = "";
        const res = await getIssueData(issue.id);
        if (res.status.id !== 3 && res.status.id !== 5 && !actualList.includes(res.id)) {
            actualList.push(res.id);
        }

        if (index === getMissedIssuesList().length - 1) {
            if (actualList.length === 1) {
                listingIssuesMsg = `–∑–∞–¥–∞—á–µ: ${actualList[0]}`;
            } else {
                listingIssuesMsg = `–∑–∞–¥–∞—á–∞—Ö: ${actualList.join(", ")}`;
            }

            if (actualList.length > 0) {
                await sendMessage(`–í–æ –≤–Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ${listingIssuesMsg}`);
                console.log(`–í–æ –≤–Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ ${listingIssuesMsg}`);
            }
            clearMissedIssues();
        }
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
export async function notifyNewIssue(issue: Issue) {
    const message: string = `${checkTracker(issue.tracker)}–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #${issue.id}${
        issue.assigned_to && issue.assigned_to.name ? " –¥–ª—è " + (issue.assigned_to).name + " " : ""
    } - ${issue.subject}\n${Config.BASE_URL}/issues/${issue.id}`;
    const status = (issue.priority).id;

    const statusIcons: Record<number, string> = {
        2: "\u{1F7E2}", // üü¢ - 3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        3: "\u{1F7E1}", // üü° - 2 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        4: "\u{1F534}", // üî¥ - 1 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        5: "\u{2B24}", //  ‚¨§ - 0 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–≤ —Ç—ë–º–Ω–æ–π —Ç–µ–º–µ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –±–µ–ª—ã–π)
    };
    const icon = statusIcons[status] || "";

    await sendMessage(icon + message, {
        parse_mode: "HTML",
    });
    console.log(message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–µ—Ä, –µ—Å–ª–∏ –ø–ª–∞—Ç–∫–∞, –æ—Ç–º–µ—á–∞–µ–º —Å–∏–º–≤–æ–ª–æ–º üí∞
const checkTracker = (tracker: IssueContent) => (tracker.id === 4 ? "\u{1F4B0}" : "");

// –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
export async function notifyStatusUpdate(issue: Issue, oldStatus: string, appointed: string | undefined) {
    const message: string = `${issue.status.id === 2 ? "<u>" : ""}${checkTracker(issue.tracker)}–í –∑–∞–¥–∞—á–µ #${
        issue.id
    }${appointed ? " (" + appointed + ") " : ""} –∏–∑–º–µ–Ω—ë–Ω —Å—Ç–∞—Ç—É—Å —Å: "${oldStatus}" –Ω–∞ "${issue.status.name}"${
        issue.status.id === 2 ? "</u>" : ""
    }\n${Config.BASE_URL}/issues/${issue.id}`;
    await sendMessage(message, {
        parse_mode: "HTML",
    });
    console.log(message);
}

// –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–∞–¥–∞—á–µ
export async function notifyIssueUpdate(issue: Issue) {
    const message: string = `${checkTracker(issue.tracker)}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–µ #${issue.id}${
        issue.assigned_to && issue.assigned_to.name ? " (" + issue.assigned_to.name + ") " : ""
    }\n${Config.BASE_URL}/issues/${issue.id}`;
    await sendMessage(message);
    console.log(message);
}

// –ü—Ä–∏—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç
export function checkNotes(issue: Issue) {
    getIssueJournals(issue.id).then(async (res: void | Issue) => {
        if (res) {
            const issueWithJournals = res;

            if (issueWithJournals.journals && issueWithJournals.journals.length > 0) {
                const lastComment = issueWithJournals.journals.sort((a, b) => (a.id) - (b.id)).pop();
                if (lastComment && lastComment.notes && lastComment.notes.length > 0) {
                    const message: string = `${checkTracker(issue.tracker)}–í –∑–∞–¥–∞—á–µ #${issue.id}${
                        issue.assigned_to && issue.assigned_to.name ? " (" + (issue.assigned_to).name + ") " : ""
                    } –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${lastComment.notes}\n${Config.BASE_URL}/issues/${issue.id}`;
                    await sendMessage(message);
                    console.log(message);
                }
            } else {
                await notifyIssueUpdate(issue);
            }
        }
    });
}